/*this is my document where I write my "follow along code," kind of like coding wordvomit, for my Udemy C++ course */

#include <iostream>

int main()
{
int favorite_number;

std::cout << "Enter your favorite number between 1 and 100:" << std::endl;

std::cin >> favorite_number;

std:cout << "Amazing!! That's my favorite number too!" << std::endl;

return 0;
}

arrays

array_name [element_index]
test_scores[0];
cin >> test_scores[0];
cin >> test_scores[5];

char vowels[] {'a','e','i','o','u'};

/*when leaving the brackets empty in an intialized array, we are telling the compiler to figure out how big the array is*/

cout << "\nThe first vowel is: " << vowels[0] << endl;
cout << "The last vowel is: " << vowels[4] << endl;

cin >> vowels[5]; //might erase other memory, might cause system crash when running the program; program crashes while testing are a good thing because we can learn how to fix it.

double high_temps [] {90.1, 89.8, 77.5, 81.6};
cout << "\nThe first high temperature is: " << high_temps[0] << endl;

high_temps[0] = 100.7; 
cout << "The first high temperature is now: " << high_temps[0] << endl;

int test_scores [5]; /*error: if we do not add {} curly braces then it won't initialize the array to 0, and instead, we will have a bunch of randomly gathered data as the initial values for our array.*/

//instead:

// int test_scores [5] {};
/*you can hard-code it as {0} or even as {100}, but the 100 will only go to first element in array; {100, 90} would put 100 in index 0 and 90 in index 1.*/

int test_scores [5] {100, 90, 80, 70, 60};

cout << "\nFirst score at index 0: " << test_scores[0] << endl;
cout << "Second score at index 1: " << test_scores[1] << endl;
cout << "Third score at index 2: " << test_scores[2] << endl;
cout << "Fourth score at index 3: " << test_scores[3] << endl;
cout << "Fifth score at index 4: " << test_scores[4] << endl;

cout << "\nEnter 5 test scores: ";
cin >> test_scores[0];
cin >> test_scores[1];
cin >> test_scores[2];
cin >> test_scores[3];
cin >> test_scores[4];

cout << "\nNotice what the value of the array name is : " << test_scores << endl; 

//name of the array is the location of the array

cout << endl;
return 0;

int arr[10] {0};
arr[0] = 100;
arr[9] = 1000;
//declaration includes total but doesn't start at 0, hence it is [10] and not [9];

//and now onto vectors

vector_name [element_index];
//or access via
vector_name.at(element_index);
test_scores.at(1);

vector <int> test_scores {100,95,99,87,88};

vector <int> test_scores {100,95,99}; //size is 3
test_scores.push_back(80);
test_scores.push_back(90); // 100, 95, 99, 80, 90,

//arrays never do bounds checking; but many vector methods do check bounds;

//to use vectors, you have to make sure to include them up at the beginning by iostream;

#include <iostream>
#include <vector>

//like so ^^

//vector <char> vowels; //empty
//vector <char> vowels (5); // 5 initalized to zero;
vector <char> vowels {'a','e','i','o','u'};

cout << vowels[0] << endl;
cout << vowels[4] << endl;

cout << "\nEnter a test score to add to the vector: ";
int score_to_add {0};
cin >> score_to_add;

test_scores.push_back(score_to_add);

cout << "\nEnter one more test score to add to the vector: ";
cin >> score_to_add;

test_scores.push_back(score_to_add);

cout << "\nTest scores are now: " << endl;

cout << test_scores.at(0) << endl;
//etc
cout << "\nThere are now " << test_scores.size() << " scores in the vector." << endl;

//cout << "This should cause an exception!!" << test_scores.at(10); //an out of range exception

//using .at(10) might throw an error message whereas just trying to access test_scores{10} won't?

//two dimensional vectors; vectors of vectors;

vector <vector<int>> movie_ratings
{
	{1,2,3,4}
	{1,2,4,4}
	{1,3,4,5}
};

cout << "\nHere are the movie ratings for the reviewer #1 using array syntax: " << endl;
cout << movie_ratings[0][0] << endl;
//etc

cout << "\nHere are the movie ratings for the reviewer #2 using vector syntax: " << endl;
cout << movie_ratings.at(1).at(0) << endl;
//etc, if i understand it.

movie_ratings

